# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BotInteractor', [dirname(__file__)])
        except ImportError:
            import _BotInteractor
            return _BotInteractor
        if fp is not None:
            try:
                _mod = imp.load_module('_BotInteractor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BotInteractor = swig_import_helper()
    del swig_import_helper
else:
    import _BotInteractor
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _BotInteractor.Vector3_x_set
    __swig_getmethods__["x"] = _BotInteractor.Vector3_x_get
    if _newclass:
        x = _swig_property(_BotInteractor.Vector3_x_get, _BotInteractor.Vector3_x_set)
    __swig_setmethods__["y"] = _BotInteractor.Vector3_y_set
    __swig_getmethods__["y"] = _BotInteractor.Vector3_y_get
    if _newclass:
        y = _swig_property(_BotInteractor.Vector3_y_get, _BotInteractor.Vector3_y_set)
    __swig_setmethods__["z"] = _BotInteractor.Vector3_z_set
    __swig_getmethods__["z"] = _BotInteractor.Vector3_z_get
    if _newclass:
        z = _swig_property(_BotInteractor.Vector3_z_get, _BotInteractor.Vector3_z_set)

    def __init__(self, *args):
        this = _BotInteractor.new_Vector3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __add__(self, right):
        return _BotInteractor.Vector3___add__(self, right)

    def __sub__(self, right):
        return _BotInteractor.Vector3___sub__(self, right)

    def __mul__(self, right):
        return _BotInteractor.Vector3___mul__(self, right)

    def __eq__(self, right):
        return _BotInteractor.Vector3___eq__(self, right)

    def __ne__(self, right):
        return _BotInteractor.Vector3___ne__(self, right)

    def To2D(self):
        return _BotInteractor.Vector3_To2D(self)
    __swig_destroy__ = _BotInteractor.delete_Vector3
    __del__ = lambda self: None
Vector3_swigregister = _BotInteractor.Vector3_swigregister
Vector3_swigregister(Vector3)
cvar = _BotInteractor.cvar
PI = cvar.PI

class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    __swig_setmethods__["coords"] = _BotInteractor.Position_coords_set
    __swig_getmethods__["coords"] = _BotInteractor.Position_coords_get
    if _newclass:
        coords = _swig_property(_BotInteractor.Position_coords_get, _BotInteractor.Position_coords_set)
    __swig_setmethods__["rotation"] = _BotInteractor.Position_rotation_set
    __swig_getmethods__["rotation"] = _BotInteractor.Position_rotation_get
    if _newclass:
        rotation = _swig_property(_BotInteractor.Position_rotation_get, _BotInteractor.Position_rotation_set)

    def __init__(self, *args):
        this = _BotInteractor.new_Position(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_Position
    __del__ = lambda self: None
Position_swigregister = _BotInteractor.Position_swigregister
Position_swigregister(Position)

class Guid128(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Guid128, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Guid128, name)
    __repr__ = _swig_repr
    __swig_setmethods__["low"] = _BotInteractor.Guid128_low_set
    __swig_getmethods__["low"] = _BotInteractor.Guid128_low_get
    if _newclass:
        low = _swig_property(_BotInteractor.Guid128_low_get, _BotInteractor.Guid128_low_set)
    __swig_setmethods__["high"] = _BotInteractor.Guid128_high_set
    __swig_getmethods__["high"] = _BotInteractor.Guid128_high_get
    if _newclass:
        high = _swig_property(_BotInteractor.Guid128_high_get, _BotInteractor.Guid128_high_set)

    def __init__(self):
        this = _BotInteractor.new_Guid128()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_Guid128
    __del__ = lambda self: None
Guid128_swigregister = _BotInteractor.Guid128_swigregister
Guid128_swigregister(Guid128)


_BotInteractor.ITEM_swigconstant(_BotInteractor)
ITEM = _BotInteractor.ITEM

_BotInteractor.CONTAINER_swigconstant(_BotInteractor)
CONTAINER = _BotInteractor.CONTAINER

_BotInteractor.UNIT_swigconstant(_BotInteractor)
UNIT = _BotInteractor.UNIT

_BotInteractor.PLAYER_swigconstant(_BotInteractor)
PLAYER = _BotInteractor.PLAYER

_BotInteractor.GAMEOBJECT_swigconstant(_BotInteractor)
GAMEOBJECT = _BotInteractor.GAMEOBJECT

_BotInteractor.DYNAMICOBJECT_swigconstant(_BotInteractor)
DYNAMICOBJECT = _BotInteractor.DYNAMICOBJECT

_BotInteractor.CORPSE_swigconstant(_BotInteractor)
CORPSE = _BotInteractor.CORPSE

_BotInteractor.AiGroup_swigconstant(_BotInteractor)
AiGroup = _BotInteractor.AiGroup

_BotInteractor.AreaTrigger_swigconstant(_BotInteractor)
AreaTrigger = _BotInteractor.AreaTrigger
class WowObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WowObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WowObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BotInteractor.delete_WowObject
    __del__ = lambda self: None

    def SetBase(self, base):
        return _BotInteractor.WowObject_SetBase(self, base)

    def GetBase(self):
        return _BotInteractor.WowObject_GetBase(self)

    def GetType(self, refresh=False):
        return _BotInteractor.WowObject_GetType(self, refresh)

    def GetID(self, refresh=False):
        return _BotInteractor.WowObject_GetID(self, refresh)

    def GetGuid(self, refresh=False):
        return _BotInteractor.WowObject_GetGuid(self, refresh)

    def GetName(self, refresh=False):
        return _BotInteractor.WowObject_GetName(self, refresh)
    __swig_getmethods__["GetType_Static"] = lambda x: _BotInteractor.WowObject_GetType_Static
    if _newclass:
        GetType_Static = staticmethod(_BotInteractor.WowObject_GetType_Static)

    def GetPosition(self):
        return _BotInteractor.WowObject_GetPosition(self)
WowObject_swigregister = _BotInteractor.WowObject_swigregister
WowObject_swigregister(WowObject)

def WowObject_GetType_Static(base):
    return _BotInteractor.WowObject_GetType_Static(base)
WowObject_GetType_Static = _BotInteractor.WowObject_GetType_Static

class Unit(WowObject):
    __swig_setmethods__ = {}
    for _s in [WowObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Unit, name, value)
    __swig_getmethods__ = {}
    for _s in [WowObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Unit, name)
    __repr__ = _swig_repr

    def __init__(self, base):
        this = _BotInteractor.new_Unit(base)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_Unit
    __del__ = lambda self: None

    def GetName(self, refresh=False):
        return _BotInteractor.Unit_GetName(self, refresh)

    def GetPosition(self):
        return _BotInteractor.Unit_GetPosition(self)

    def DumpPosition(self):
        return _BotInteractor.Unit_DumpPosition(self)

    def IsQuestGiver(self):
        return _BotInteractor.Unit_IsQuestGiver(self)
Unit_swigregister = _BotInteractor.Unit_swigregister
Unit_swigregister(Unit)

class Player(Unit):
    __swig_setmethods__ = {}
    for _s in [Unit]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Player, name, value)
    __swig_getmethods__ = {}
    for _s in [Unit]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Player, name)
    __repr__ = _swig_repr

    def __init__(self, base):
        this = _BotInteractor.new_Player(base)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_Player
    __del__ = lambda self: None

    def GetName(self, refresh=False):
        return _BotInteractor.Player_GetName(self, refresh)
Player_swigregister = _BotInteractor.Player_swigregister
Player_swigregister(Player)


_BotInteractor.Axis_X_swigconstant(_BotInteractor)
Axis_X = _BotInteractor.Axis_X

_BotInteractor.Axis_Y_swigconstant(_BotInteractor)
Axis_Y = _BotInteractor.Axis_Y

_BotInteractor.Axis_Z_swigconstant(_BotInteractor)
Axis_Z = _BotInteractor.Axis_Z

_BotInteractor.AngleValueType_degree_swigconstant(_BotInteractor)
AngleValueType_degree = _BotInteractor.AngleValueType_degree

_BotInteractor.AngleValueType_radian_swigconstant(_BotInteractor)
AngleValueType_radian = _BotInteractor.AngleValueType_radian
class Transformer3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transformer3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transformer3D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rotation_matrix_X"] = _BotInteractor.Transformer3D_rotation_matrix_X_set
    __swig_getmethods__["rotation_matrix_X"] = _BotInteractor.Transformer3D_rotation_matrix_X_get
    if _newclass:
        rotation_matrix_X = _swig_property(_BotInteractor.Transformer3D_rotation_matrix_X_get, _BotInteractor.Transformer3D_rotation_matrix_X_set)
    __swig_setmethods__["rotation_matrix_Y"] = _BotInteractor.Transformer3D_rotation_matrix_Y_set
    __swig_getmethods__["rotation_matrix_Y"] = _BotInteractor.Transformer3D_rotation_matrix_Y_get
    if _newclass:
        rotation_matrix_Y = _swig_property(_BotInteractor.Transformer3D_rotation_matrix_Y_get, _BotInteractor.Transformer3D_rotation_matrix_Y_set)
    __swig_setmethods__["rotation_matrix_Z"] = _BotInteractor.Transformer3D_rotation_matrix_Z_set
    __swig_getmethods__["rotation_matrix_Z"] = _BotInteractor.Transformer3D_rotation_matrix_Z_get
    if _newclass:
        rotation_matrix_Z = _swig_property(_BotInteractor.Transformer3D_rotation_matrix_Z_get, _BotInteractor.Transformer3D_rotation_matrix_Z_set)

    def __init__(self):
        this = _BotInteractor.new_Transformer3D()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_getmethods__["Rotate"] = lambda x: _BotInteractor.Transformer3D_Rotate
    if _newclass:
        Rotate = staticmethod(_BotInteractor.Transformer3D_Rotate)
    __swig_getmethods__["SetRotationAngle"] = lambda x: _BotInteractor.Transformer3D_SetRotationAngle
    if _newclass:
        SetRotationAngle = staticmethod(_BotInteractor.Transformer3D_SetRotationAngle)
    __swig_destroy__ = _BotInteractor.delete_Transformer3D
    __del__ = lambda self: None
Transformer3D_swigregister = _BotInteractor.Transformer3D_swigregister
Transformer3D_swigregister(Transformer3D)

def Transformer3D_Rotate(angle, value, axis):
    return _BotInteractor.Transformer3D_Rotate(angle, value, axis)
Transformer3D_Rotate = _BotInteractor.Transformer3D_Rotate

def Transformer3D_SetRotationAngle(axis, angle):
    return _BotInteractor.Transformer3D_SetRotationAngle(axis, angle)
Transformer3D_SetRotationAngle = _BotInteractor.Transformer3D_SetRotationAngle

class Location(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Location, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Location, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _BotInteractor.Location_name_set
    __swig_getmethods__["name"] = _BotInteractor.Location_name_get
    if _newclass:
        name = _swig_property(_BotInteractor.Location_name_get, _BotInteractor.Location_name_set)
    __swig_setmethods__["id"] = _BotInteractor.Location_id_set
    __swig_getmethods__["id"] = _BotInteractor.Location_id_get
    if _newclass:
        id = _swig_property(_BotInteractor.Location_id_get, _BotInteractor.Location_id_set)

    def __init__(self, *args):
        this = _BotInteractor.new_Location(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __eq__(self, other):
        return _BotInteractor.Location___eq__(self, other)

    def __ne__(self, other):
        return _BotInteractor.Location___ne__(self, other)
    __swig_destroy__ = _BotInteractor.delete_Location
    __del__ = lambda self: None
Location_swigregister = _BotInteractor.Location_swigregister
Location_swigregister(Location)

class LocationBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocationBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocationBase, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Init"] = lambda x: _BotInteractor.LocationBase_Init
    if _newclass:
        Init = staticmethod(_BotInteractor.LocationBase_Init)
    __swig_getmethods__["Add"] = lambda x: _BotInteractor.LocationBase_Add
    if _newclass:
        Add = staticmethod(_BotInteractor.LocationBase_Add)
    __swig_getmethods__["Clear"] = lambda x: _BotInteractor.LocationBase_Clear
    if _newclass:
        Clear = staticmethod(_BotInteractor.LocationBase_Clear)
    __swig_getmethods__["IsInitialized"] = lambda x: _BotInteractor.LocationBase_IsInitialized
    if _newclass:
        IsInitialized = staticmethod(_BotInteractor.LocationBase_IsInitialized)
    __swig_getmethods__["Get"] = lambda x: _BotInteractor.LocationBase_Get
    if _newclass:
        Get = staticmethod(_BotInteractor.LocationBase_Get)

    def __init__(self):
        this = _BotInteractor.new_LocationBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_LocationBase
    __del__ = lambda self: None
LocationBase_swigregister = _BotInteractor.LocationBase_swigregister
LocationBase_swigregister(LocationBase)

def LocationBase_Init():
    return _BotInteractor.LocationBase_Init()
LocationBase_Init = _BotInteractor.LocationBase_Init

def LocationBase_Add(loc):
    return _BotInteractor.LocationBase_Add(loc)
LocationBase_Add = _BotInteractor.LocationBase_Add

def LocationBase_Clear():
    return _BotInteractor.LocationBase_Clear()
LocationBase_Clear = _BotInteractor.LocationBase_Clear

def LocationBase_IsInitialized():
    return _BotInteractor.LocationBase_IsInitialized()
LocationBase_IsInitialized = _BotInteractor.LocationBase_IsInitialized

def LocationBase_Get(*args):
    return _BotInteractor.LocationBase_Get(*args)
LocationBase_Get = _BotInteractor.LocationBase_Get


def WorldPositionToBlockCoords(position):
    return _BotInteractor.WorldPositionToBlockCoords(position)
WorldPositionToBlockCoords = _BotInteractor.WorldPositionToBlockCoords

def BlockCoordsToWorldPosition(coords):
    return _BotInteractor.BlockCoordsToWorldPosition(coords)
BlockCoordsToWorldPosition = _BotInteractor.BlockCoordsToWorldPosition

def WorldPositionToChunkCoords(position):
    return _BotInteractor.WorldPositionToChunkCoords(position)
WorldPositionToChunkCoords = _BotInteractor.WorldPositionToChunkCoords

def ToGlobalChunkCoords(block_coordinates, coordinates):
    return _BotInteractor.ToGlobalChunkCoords(block_coordinates, coordinates)
ToGlobalChunkCoords = _BotInteractor.ToGlobalChunkCoords
class Triangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triangle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["indices"] = _BotInteractor.Triangle_indices_set
    __swig_getmethods__["indices"] = _BotInteractor.Triangle_indices_get
    if _newclass:
        indices = _swig_property(_BotInteractor.Triangle_indices_get, _BotInteractor.Triangle_indices_set)

    def __init__(self):
        this = _BotInteractor.new_Triangle()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_Triangle
    __del__ = lambda self: None
Triangle_swigregister = _BotInteractor.Triangle_swigregister
Triangle_swigregister(Triangle)
Mver = cvar.Mver
Mhdr = cvar.Mhdr
Mcin = cvar.Mcin
Mtex = cvar.Mtex
Mmdx = cvar.Mmdx
Mmid = cvar.Mmid
Mwmo = cvar.Mwmo
Mwid = cvar.Mwid
Mddf = cvar.Mddf
Modf = cvar.Modf
Mh2o = cvar.Mh2o
Mfbo = cvar.Mfbo
Mtxf = cvar.Mtxf
Mtxp = cvar.Mtxp
Mcnk = cvar.Mcnk
Mcvt = cvar.Mcvt
Mcrd = cvar.Mcrd
Mcrw = cvar.Mcrw
Mohd = cvar.Mohd
Mogp = cvar.Mogp
Movt = cvar.Movt
Movi = cvar.Movi
BlockSize = cvar.BlockSize
ChunkSize = cvar.ChunkSize
UnitSize = cvar.UnitSize
MapSize = cvar.MapSize
MapMidPoint = cvar.MapMidPoint

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _BotInteractor.Color_r_set
    __swig_getmethods__["r"] = _BotInteractor.Color_r_get
    if _newclass:
        r = _swig_property(_BotInteractor.Color_r_get, _BotInteractor.Color_r_set)
    __swig_setmethods__["g"] = _BotInteractor.Color_g_set
    __swig_getmethods__["g"] = _BotInteractor.Color_g_get
    if _newclass:
        g = _swig_property(_BotInteractor.Color_g_get, _BotInteractor.Color_g_set)
    __swig_setmethods__["b"] = _BotInteractor.Color_b_set
    __swig_getmethods__["b"] = _BotInteractor.Color_b_get
    if _newclass:
        b = _swig_property(_BotInteractor.Color_b_get, _BotInteractor.Color_b_set)
    __swig_setmethods__["a"] = _BotInteractor.Color_a_set
    __swig_getmethods__["a"] = _BotInteractor.Color_a_get
    if _newclass:
        a = _swig_property(_BotInteractor.Color_a_get, _BotInteractor.Color_a_set)

    def __init__(self, *args):
        this = _BotInteractor.new_Color(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_Color
    __del__ = lambda self: None
Color_swigregister = _BotInteractor.Color_swigregister
Color_swigregister(Color)

class Vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _BotInteractor.Vertex_position_set
    __swig_getmethods__["position"] = _BotInteractor.Vertex_position_get
    if _newclass:
        position = _swig_property(_BotInteractor.Vertex_position_get, _BotInteractor.Vertex_position_set)
    __swig_setmethods__["color"] = _BotInteractor.Vertex_color_set
    __swig_getmethods__["color"] = _BotInteractor.Vertex_color_get
    if _newclass:
        color = _swig_property(_BotInteractor.Vertex_color_get, _BotInteractor.Vertex_color_set)

    def __init__(self, *args):
        this = _BotInteractor.new_Vertex(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_Vertex
    __del__ = lambda self: None
Vertex_swigregister = _BotInteractor.Vertex_swigregister
Vertex_swigregister(Vertex)

class BoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["up"] = _BotInteractor.BoundingBox_up_set
    __swig_getmethods__["up"] = _BotInteractor.BoundingBox_up_get
    if _newclass:
        up = _swig_property(_BotInteractor.BoundingBox_up_get, _BotInteractor.BoundingBox_up_set)
    __swig_setmethods__["down"] = _BotInteractor.BoundingBox_down_set
    __swig_getmethods__["down"] = _BotInteractor.BoundingBox_down_get
    if _newclass:
        down = _swig_property(_BotInteractor.BoundingBox_down_get, _BotInteractor.BoundingBox_down_set)

    def IsInside2D(self, point):
        return _BotInteractor.BoundingBox_IsInside2D(self, point)

    def GetArrayMin(self):
        return _BotInteractor.BoundingBox_GetArrayMin(self)

    def GetArrayMax(self):
        return _BotInteractor.BoundingBox_GetArrayMax(self)

    def __init__(self):
        this = _BotInteractor.new_BoundingBox()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_BoundingBox
    __del__ = lambda self: None
BoundingBox_swigregister = _BotInteractor.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

class Area(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Area, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Area, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _BotInteractor.delete_Area
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _BotInteractor.new_Area(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def CheckAndUpdate(self, location, block_coordinates, coordinates):
        return _BotInteractor.Area_CheckAndUpdate(self, location, block_coordinates, coordinates)

    def UpdateArea(self, location, block_coordinates, coordinates):
        return _BotInteractor.Area_UpdateArea(self, location, block_coordinates, coordinates)

    def GetRadius(self):
        return _BotInteractor.Area_GetRadius(self)

    def GetSize(self):
        return _BotInteractor.Area_GetSize(self)

    def GetBoundingBox(self):
        return _BotInteractor.Area_GetBoundingBox(self)

    def GetWMOs(self):
        return _BotInteractor.Area_GetWMOs(self)

    def GetDoodads(self):
        return _BotInteractor.Area_GetDoodads(self)

    def GetLocation(self):
        return _BotInteractor.Area_GetLocation(self)

    def GetChunks(self):
        return _BotInteractor.Area_GetChunks(self)

    def IsOutOfBounds(self, location, block_coordinates, coordinates):
        return _BotInteractor.Area_IsOutOfBounds(self, location, block_coordinates, coordinates)

    def InitMapObjects(self):
        return _BotInteractor.Area_InitMapObjects(self)
Area_swigregister = _BotInteractor.Area_swigregister
Area_swigregister(Area)

class NavConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NavConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NavConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_maxTiles"] = _BotInteractor.NavConfig_m_maxTiles_set
    __swig_getmethods__["m_maxTiles"] = _BotInteractor.NavConfig_m_maxTiles_get
    if _newclass:
        m_maxTiles = _swig_property(_BotInteractor.NavConfig_m_maxTiles_get, _BotInteractor.NavConfig_m_maxTiles_set)
    __swig_setmethods__["m_maxPolysPerTile"] = _BotInteractor.NavConfig_m_maxPolysPerTile_set
    __swig_getmethods__["m_maxPolysPerTile"] = _BotInteractor.NavConfig_m_maxPolysPerTile_get
    if _newclass:
        m_maxPolysPerTile = _swig_property(_BotInteractor.NavConfig_m_maxPolysPerTile_get, _BotInteractor.NavConfig_m_maxPolysPerTile_set)
    __swig_setmethods__["m_tileSize"] = _BotInteractor.NavConfig_m_tileSize_set
    __swig_getmethods__["m_tileSize"] = _BotInteractor.NavConfig_m_tileSize_get
    if _newclass:
        m_tileSize = _swig_property(_BotInteractor.NavConfig_m_tileSize_get, _BotInteractor.NavConfig_m_tileSize_set)
    __swig_setmethods__["m_cellSize"] = _BotInteractor.NavConfig_m_cellSize_set
    __swig_getmethods__["m_cellSize"] = _BotInteractor.NavConfig_m_cellSize_get
    if _newclass:
        m_cellSize = _swig_property(_BotInteractor.NavConfig_m_cellSize_get, _BotInteractor.NavConfig_m_cellSize_set)
    __swig_setmethods__["m_cellHeight"] = _BotInteractor.NavConfig_m_cellHeight_set
    __swig_getmethods__["m_cellHeight"] = _BotInteractor.NavConfig_m_cellHeight_get
    if _newclass:
        m_cellHeight = _swig_property(_BotInteractor.NavConfig_m_cellHeight_get, _BotInteractor.NavConfig_m_cellHeight_set)
    __swig_setmethods__["m_agentHeight"] = _BotInteractor.NavConfig_m_agentHeight_set
    __swig_getmethods__["m_agentHeight"] = _BotInteractor.NavConfig_m_agentHeight_get
    if _newclass:
        m_agentHeight = _swig_property(_BotInteractor.NavConfig_m_agentHeight_get, _BotInteractor.NavConfig_m_agentHeight_set)
    __swig_setmethods__["m_agentRadius"] = _BotInteractor.NavConfig_m_agentRadius_set
    __swig_getmethods__["m_agentRadius"] = _BotInteractor.NavConfig_m_agentRadius_get
    if _newclass:
        m_agentRadius = _swig_property(_BotInteractor.NavConfig_m_agentRadius_get, _BotInteractor.NavConfig_m_agentRadius_set)
    __swig_setmethods__["m_agentMaxClimb"] = _BotInteractor.NavConfig_m_agentMaxClimb_set
    __swig_getmethods__["m_agentMaxClimb"] = _BotInteractor.NavConfig_m_agentMaxClimb_get
    if _newclass:
        m_agentMaxClimb = _swig_property(_BotInteractor.NavConfig_m_agentMaxClimb_get, _BotInteractor.NavConfig_m_agentMaxClimb_set)
    __swig_setmethods__["m_agentMaxSlope"] = _BotInteractor.NavConfig_m_agentMaxSlope_set
    __swig_getmethods__["m_agentMaxSlope"] = _BotInteractor.NavConfig_m_agentMaxSlope_get
    if _newclass:
        m_agentMaxSlope = _swig_property(_BotInteractor.NavConfig_m_agentMaxSlope_get, _BotInteractor.NavConfig_m_agentMaxSlope_set)
    __swig_setmethods__["m_regionMinSize"] = _BotInteractor.NavConfig_m_regionMinSize_set
    __swig_getmethods__["m_regionMinSize"] = _BotInteractor.NavConfig_m_regionMinSize_get
    if _newclass:
        m_regionMinSize = _swig_property(_BotInteractor.NavConfig_m_regionMinSize_get, _BotInteractor.NavConfig_m_regionMinSize_set)
    __swig_setmethods__["m_regionMergeSize"] = _BotInteractor.NavConfig_m_regionMergeSize_set
    __swig_getmethods__["m_regionMergeSize"] = _BotInteractor.NavConfig_m_regionMergeSize_get
    if _newclass:
        m_regionMergeSize = _swig_property(_BotInteractor.NavConfig_m_regionMergeSize_get, _BotInteractor.NavConfig_m_regionMergeSize_set)
    __swig_setmethods__["m_edgeMaxLen"] = _BotInteractor.NavConfig_m_edgeMaxLen_set
    __swig_getmethods__["m_edgeMaxLen"] = _BotInteractor.NavConfig_m_edgeMaxLen_get
    if _newclass:
        m_edgeMaxLen = _swig_property(_BotInteractor.NavConfig_m_edgeMaxLen_get, _BotInteractor.NavConfig_m_edgeMaxLen_set)
    __swig_setmethods__["m_edgeMaxError"] = _BotInteractor.NavConfig_m_edgeMaxError_set
    __swig_getmethods__["m_edgeMaxError"] = _BotInteractor.NavConfig_m_edgeMaxError_get
    if _newclass:
        m_edgeMaxError = _swig_property(_BotInteractor.NavConfig_m_edgeMaxError_get, _BotInteractor.NavConfig_m_edgeMaxError_set)
    __swig_setmethods__["m_vertsPerPoly"] = _BotInteractor.NavConfig_m_vertsPerPoly_set
    __swig_getmethods__["m_vertsPerPoly"] = _BotInteractor.NavConfig_m_vertsPerPoly_get
    if _newclass:
        m_vertsPerPoly = _swig_property(_BotInteractor.NavConfig_m_vertsPerPoly_get, _BotInteractor.NavConfig_m_vertsPerPoly_set)
    __swig_setmethods__["m_detailSampleDist"] = _BotInteractor.NavConfig_m_detailSampleDist_set
    __swig_getmethods__["m_detailSampleDist"] = _BotInteractor.NavConfig_m_detailSampleDist_get
    if _newclass:
        m_detailSampleDist = _swig_property(_BotInteractor.NavConfig_m_detailSampleDist_get, _BotInteractor.NavConfig_m_detailSampleDist_set)
    __swig_setmethods__["m_detailSampleMaxError"] = _BotInteractor.NavConfig_m_detailSampleMaxError_set
    __swig_getmethods__["m_detailSampleMaxError"] = _BotInteractor.NavConfig_m_detailSampleMaxError_get
    if _newclass:
        m_detailSampleMaxError = _swig_property(_BotInteractor.NavConfig_m_detailSampleMaxError_get, _BotInteractor.NavConfig_m_detailSampleMaxError_set)
    __swig_setmethods__["m_partitionType"] = _BotInteractor.NavConfig_m_partitionType_set
    __swig_getmethods__["m_partitionType"] = _BotInteractor.NavConfig_m_partitionType_get
    if _newclass:
        m_partitionType = _swig_property(_BotInteractor.NavConfig_m_partitionType_get, _BotInteractor.NavConfig_m_partitionType_set)

    def __init__(self):
        this = _BotInteractor.new_NavConfig()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_NavConfig
    __del__ = lambda self: None
NavConfig_swigregister = _BotInteractor.NavConfig_swigregister
NavConfig_swigregister(NavConfig)

class NavArea(Area):
    __swig_setmethods__ = {}
    for _s in [Area]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NavArea, name, value)
    __swig_getmethods__ = {}
    for _s in [Area]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NavArea, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _BotInteractor.delete_NavArea
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _BotInteractor.new_NavArea(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def InitAreaBoundingBox(self):
        return _BotInteractor.NavArea_InitAreaBoundingBox(self)
    __swig_setmethods__["config"] = _BotInteractor.NavArea_config_set
    __swig_getmethods__["config"] = _BotInteractor.NavArea_config_get
    if _newclass:
        config = _swig_property(_BotInteractor.NavArea_config_get, _BotInteractor.NavArea_config_set)
    __swig_setmethods__["m_navQuery"] = _BotInteractor.NavArea_m_navQuery_set
    __swig_getmethods__["m_navQuery"] = _BotInteractor.NavArea_m_navQuery_get
    if _newclass:
        m_navQuery = _swig_property(_BotInteractor.NavArea_m_navQuery_get, _BotInteractor.NavArea_m_navQuery_set)
    __swig_setmethods__["m_navMesh"] = _BotInteractor.NavArea_m_navMesh_set
    __swig_getmethods__["m_navMesh"] = _BotInteractor.NavArea_m_navMesh_get
    if _newclass:
        m_navMesh = _swig_property(_BotInteractor.NavArea_m_navMesh_get, _BotInteractor.NavArea_m_navMesh_set)
    __swig_setmethods__["m_pmesh"] = _BotInteractor.NavArea_m_pmesh_set
    __swig_getmethods__["m_pmesh"] = _BotInteractor.NavArea_m_pmesh_get
    if _newclass:
        m_pmesh = _swig_property(_BotInteractor.NavArea_m_pmesh_get, _BotInteractor.NavArea_m_pmesh_set)
    __swig_setmethods__["m_dmesh"] = _BotInteractor.NavArea_m_dmesh_set
    __swig_getmethods__["m_dmesh"] = _BotInteractor.NavArea_m_dmesh_get
    if _newclass:
        m_dmesh = _swig_property(_BotInteractor.NavArea_m_dmesh_get, _BotInteractor.NavArea_m_dmesh_set)
    __swig_setmethods__["m_solid"] = _BotInteractor.NavArea_m_solid_set
    __swig_getmethods__["m_solid"] = _BotInteractor.NavArea_m_solid_get
    if _newclass:
        m_solid = _swig_property(_BotInteractor.NavArea_m_solid_get, _BotInteractor.NavArea_m_solid_set)
    __swig_setmethods__["m_chf"] = _BotInteractor.NavArea_m_chf_set
    __swig_getmethods__["m_chf"] = _BotInteractor.NavArea_m_chf_get
    if _newclass:
        m_chf = _swig_property(_BotInteractor.NavArea_m_chf_get, _BotInteractor.NavArea_m_chf_set)
    __swig_setmethods__["m_cset"] = _BotInteractor.NavArea_m_cset_set
    __swig_getmethods__["m_cset"] = _BotInteractor.NavArea_m_cset_get
    if _newclass:
        m_cset = _swig_property(_BotInteractor.NavArea_m_cset_get, _BotInteractor.NavArea_m_cset_set)
    __swig_setmethods__["m_ctx"] = _BotInteractor.NavArea_m_ctx_set
    __swig_getmethods__["m_ctx"] = _BotInteractor.NavArea_m_ctx_get
    if _newclass:
        m_ctx = _swig_property(_BotInteractor.NavArea_m_ctx_get, _BotInteractor.NavArea_m_ctx_set)
    __swig_setmethods__["MAX_SMOOTH"] = _BotInteractor.NavArea_MAX_SMOOTH_set
    __swig_getmethods__["MAX_SMOOTH"] = _BotInteractor.NavArea_MAX_SMOOTH_get
    if _newclass:
        MAX_SMOOTH = _swig_property(_BotInteractor.NavArea_MAX_SMOOTH_get, _BotInteractor.NavArea_MAX_SMOOTH_set)
    __swig_setmethods__["m_smoothPath"] = _BotInteractor.NavArea_m_smoothPath_set
    __swig_getmethods__["m_smoothPath"] = _BotInteractor.NavArea_m_smoothPath_get
    if _newclass:
        m_smoothPath = _swig_property(_BotInteractor.NavArea_m_smoothPath_get, _BotInteractor.NavArea_m_smoothPath_set)
    __swig_setmethods__["m_nsmoothPath"] = _BotInteractor.NavArea_m_nsmoothPath_set
    __swig_getmethods__["m_nsmoothPath"] = _BotInteractor.NavArea_m_nsmoothPath_get
    if _newclass:
        m_nsmoothPath = _swig_property(_BotInteractor.NavArea_m_nsmoothPath_get, _BotInteractor.NavArea_m_nsmoothPath_set)

    def InitNavigation(self):
        return _BotInteractor.NavArea_InitNavigation(self)

    def CleanUp(self):
        return _BotInteractor.NavArea_CleanUp(self)

    def BuildAllTiles(self):
        return _BotInteractor.NavArea_BuildAllTiles(self)

    def BuildTileMesh(self, x, y, bmin, bmax, dataSize):
        return _BotInteractor.NavArea_BuildTileMesh(self, x, y, bmin, bmax, dataSize)

    def FindPath(self, start, end, nPathSlot):
        return _BotInteractor.NavArea_FindPath(self, start, end, nPathSlot)
    __swig_getmethods__["InitNavConfig"] = lambda x: _BotInteractor.NavArea_InitNavConfig
    if _newclass:
        InitNavConfig = staticmethod(_BotInteractor.NavArea_InitNavConfig)
    __swig_getmethods__["getSteerTarget"] = lambda x: _BotInteractor.NavArea_getSteerTarget
    if _newclass:
        getSteerTarget = staticmethod(_BotInteractor.NavArea_getSteerTarget)
    __swig_getmethods__["inRange"] = lambda x: _BotInteractor.NavArea_inRange
    if _newclass:
        inRange = staticmethod(_BotInteractor.NavArea_inRange)
    __swig_getmethods__["fixupCorridor"] = lambda x: _BotInteractor.NavArea_fixupCorridor
    if _newclass:
        fixupCorridor = staticmethod(_BotInteractor.NavArea_fixupCorridor)
    __swig_getmethods__["fixupShortcuts"] = lambda x: _BotInteractor.NavArea_fixupShortcuts
    if _newclass:
        fixupShortcuts = staticmethod(_BotInteractor.NavArea_fixupShortcuts)
    __swig_getmethods__["RastChunks"] = lambda x: _BotInteractor.NavArea_RastChunks
    if _newclass:
        RastChunks = staticmethod(_BotInteractor.NavArea_RastChunks)
NavArea_swigregister = _BotInteractor.NavArea_swigregister
NavArea_swigregister(NavArea)

def NavArea_InitNavConfig():
    return _BotInteractor.NavArea_InitNavConfig()
NavArea_InitNavConfig = _BotInteractor.NavArea_InitNavConfig

def NavArea_getSteerTarget(navQuery, startPos, endPos, minTargetDist, path, pathSize, steerPos, steerPosFlag, steerPosRef, outPoints=None, outPointCount=None):
    return _BotInteractor.NavArea_getSteerTarget(navQuery, startPos, endPos, minTargetDist, path, pathSize, steerPos, steerPosFlag, steerPosRef, outPoints, outPointCount)
NavArea_getSteerTarget = _BotInteractor.NavArea_getSteerTarget

def NavArea_inRange(v1, v2, r, h):
    return _BotInteractor.NavArea_inRange(v1, v2, r, h)
NavArea_inRange = _BotInteractor.NavArea_inRange

def NavArea_fixupCorridor(path, npath, maxPath, visited, nvisited):
    return _BotInteractor.NavArea_fixupCorridor(path, npath, maxPath, visited, nvisited)
NavArea_fixupCorridor = _BotInteractor.NavArea_fixupCorridor

def NavArea_fixupShortcuts(path, npath, navQuery):
    return _BotInteractor.NavArea_fixupShortcuts(path, npath, navQuery)
NavArea_fixupShortcuts = _BotInteractor.NavArea_fixupShortcuts

def NavArea_RastChunks(model, m_cfg, m_ctx, m_solid, m_tileTriCount):
    return _BotInteractor.NavArea_RastChunks(model, m_cfg, m_ctx, m_solid, m_tileTriCount)
NavArea_RastChunks = _BotInteractor.NavArea_RastChunks

import collections
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BotInteractor.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _BotInteractor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BotInteractor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BotInteractor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BotInteractor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BotInteractor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BotInteractor.SwigPyIterator_copy(self)

    def next(self):
        return _BotInteractor.SwigPyIterator_next(self)

    def __next__(self):
        return _BotInteractor.SwigPyIterator___next__(self)

    def previous(self):
        return _BotInteractor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BotInteractor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BotInteractor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BotInteractor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BotInteractor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BotInteractor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BotInteractor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BotInteractor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BotInteractor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class QuestObjective(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuestObjective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuestObjective, name)
    __repr__ = _swig_repr
    KillCreatures = _BotInteractor.QuestObjective_KillCreatures
    __swig_setmethods__["type"] = _BotInteractor.QuestObjective_type_set
    __swig_getmethods__["type"] = _BotInteractor.QuestObjective_type_get
    if _newclass:
        type = _swig_property(_BotInteractor.QuestObjective_type_get, _BotInteractor.QuestObjective_type_set)

    def __init__(self):
        this = _BotInteractor.new_QuestObjective()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_QuestObjective
    __del__ = lambda self: None
QuestObjective_swigregister = _BotInteractor.QuestObjective_swigregister
QuestObjective_swigregister(QuestObjective)

class QuestAreaObjective(QuestObjective):
    __swig_setmethods__ = {}
    for _s in [QuestObjective]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuestAreaObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [QuestObjective]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuestAreaObjective, name)
    __repr__ = _swig_repr
    __swig_setmethods__["area"] = _BotInteractor.QuestAreaObjective_area_set
    __swig_getmethods__["area"] = _BotInteractor.QuestAreaObjective_area_get
    if _newclass:
        area = _swig_property(_BotInteractor.QuestAreaObjective_area_get, _BotInteractor.QuestAreaObjective_area_set)

    def __init__(self):
        this = _BotInteractor.new_QuestAreaObjective()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_QuestAreaObjective
    __del__ = lambda self: None
QuestAreaObjective_swigregister = _BotInteractor.QuestAreaObjective_swigregister
QuestAreaObjective_swigregister(QuestAreaObjective)

class QuestKillObjective(QuestAreaObjective):
    __swig_setmethods__ = {}
    for _s in [QuestAreaObjective]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuestKillObjective, name, value)
    __swig_getmethods__ = {}
    for _s in [QuestAreaObjective]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuestKillObjective, name)
    __repr__ = _swig_repr
    __swig_setmethods__["unit_id"] = _BotInteractor.QuestKillObjective_unit_id_set
    __swig_getmethods__["unit_id"] = _BotInteractor.QuestKillObjective_unit_id_get
    if _newclass:
        unit_id = _swig_property(_BotInteractor.QuestKillObjective_unit_id_get, _BotInteractor.QuestKillObjective_unit_id_set)
    __swig_setmethods__["count"] = _BotInteractor.QuestKillObjective_count_set
    __swig_getmethods__["count"] = _BotInteractor.QuestKillObjective_count_get
    if _newclass:
        count = _swig_property(_BotInteractor.QuestKillObjective_count_get, _BotInteractor.QuestKillObjective_count_set)

    def __init__(self):
        this = _BotInteractor.new_QuestKillObjective()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_QuestKillObjective
    __del__ = lambda self: None
QuestKillObjective_swigregister = _BotInteractor.QuestKillObjective_swigregister
QuestKillObjective_swigregister(QuestKillObjective)

class Quest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _BotInteractor.Quest_id_set
    __swig_getmethods__["id"] = _BotInteractor.Quest_id_get
    if _newclass:
        id = _swig_property(_BotInteractor.Quest_id_get, _BotInteractor.Quest_id_set)
    __swig_setmethods__["objectives_count"] = _BotInteractor.Quest_objectives_count_set
    __swig_getmethods__["objectives_count"] = _BotInteractor.Quest_objectives_count_get
    if _newclass:
        objectives_count = _swig_property(_BotInteractor.Quest_objectives_count_get, _BotInteractor.Quest_objectives_count_set)
    __swig_setmethods__["kill_objective1"] = _BotInteractor.Quest_kill_objective1_set
    __swig_getmethods__["kill_objective1"] = _BotInteractor.Quest_kill_objective1_get
    if _newclass:
        kill_objective1 = _swig_property(_BotInteractor.Quest_kill_objective1_get, _BotInteractor.Quest_kill_objective1_set)
    __swig_setmethods__["kill_objective2"] = _BotInteractor.Quest_kill_objective2_set
    __swig_getmethods__["kill_objective2"] = _BotInteractor.Quest_kill_objective2_get
    if _newclass:
        kill_objective2 = _swig_property(_BotInteractor.Quest_kill_objective2_get, _BotInteractor.Quest_kill_objective2_set)
    __swig_setmethods__["kill_objective3"] = _BotInteractor.Quest_kill_objective3_set
    __swig_getmethods__["kill_objective3"] = _BotInteractor.Quest_kill_objective3_get
    if _newclass:
        kill_objective3 = _swig_property(_BotInteractor.Quest_kill_objective3_get, _BotInteractor.Quest_kill_objective3_set)
    __swig_setmethods__["kill_objective4"] = _BotInteractor.Quest_kill_objective4_set
    __swig_getmethods__["kill_objective4"] = _BotInteractor.Quest_kill_objective4_get
    if _newclass:
        kill_objective4 = _swig_property(_BotInteractor.Quest_kill_objective4_get, _BotInteractor.Quest_kill_objective4_set)

    def GetTitle(self):
        return _BotInteractor.Quest_GetTitle(self)

    def GetObjectivesBlobs(self):
        return _BotInteractor.Quest_GetObjectivesBlobs(self)

    def Init(self, id):
        return _BotInteractor.Quest_Init(self, id)

    def __init__(self, *args):
        this = _BotInteractor.new_Quest(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_Quest
    __del__ = lambda self: None
Quest_swigregister = _BotInteractor.Quest_swigregister
Quest_swigregister(Quest)

class _KillCreatureObjective(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _KillCreatureObjective, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _KillCreatureObjective, name)
    __repr__ = _swig_repr
    __swig_setmethods__["creature_id"] = _BotInteractor._KillCreatureObjective_creature_id_set
    __swig_getmethods__["creature_id"] = _BotInteractor._KillCreatureObjective_creature_id_get
    if _newclass:
        creature_id = _swig_property(_BotInteractor._KillCreatureObjective_creature_id_get, _BotInteractor._KillCreatureObjective_creature_id_set)
    __swig_setmethods__["creatures_count"] = _BotInteractor._KillCreatureObjective_creatures_count_set
    __swig_getmethods__["creatures_count"] = _BotInteractor._KillCreatureObjective_creatures_count_get
    if _newclass:
        creatures_count = _swig_property(_BotInteractor._KillCreatureObjective_creatures_count_get, _BotInteractor._KillCreatureObjective_creatures_count_set)

    def __init__(self):
        this = _BotInteractor.new__KillCreatureObjective()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete__KillCreatureObjective
    __del__ = lambda self: None
_KillCreatureObjective_swigregister = _BotInteractor._KillCreatureObjective_swigregister
_KillCreatureObjective_swigregister(_KillCreatureObjective)

class _Quest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Quest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Quest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _BotInteractor._Quest_id_set
    __swig_getmethods__["id"] = _BotInteractor._Quest_id_get
    if _newclass:
        id = _swig_property(_BotInteractor._Quest_id_get, _BotInteractor._Quest_id_set)
    __swig_setmethods__["f"] = _BotInteractor._Quest_f_set
    __swig_getmethods__["f"] = _BotInteractor._Quest_f_get
    if _newclass:
        f = _swig_property(_BotInteractor._Quest_f_get, _BotInteractor._Quest_f_set)
    __swig_setmethods__["Name"] = _BotInteractor._Quest_Name_set
    __swig_getmethods__["Name"] = _BotInteractor._Quest_Name_get
    if _newclass:
        Name = _swig_property(_BotInteractor._Quest_Name_get, _BotInteractor._Quest_Name_set)
    __swig_setmethods__["ObjectiveText"] = _BotInteractor._Quest_ObjectiveText_set
    __swig_getmethods__["ObjectiveText"] = _BotInteractor._Quest_ObjectiveText_get
    if _newclass:
        ObjectiveText = _swig_property(_BotInteractor._Quest_ObjectiveText_get, _BotInteractor._Quest_ObjectiveText_set)
    __swig_setmethods__["Description"] = _BotInteractor._Quest_Description_set
    __swig_getmethods__["Description"] = _BotInteractor._Quest_Description_get
    if _newclass:
        Description = _swig_property(_BotInteractor._Quest_Description_get, _BotInteractor._Quest_Description_set)
    __swig_setmethods__["EndText"] = _BotInteractor._Quest_EndText_set
    __swig_getmethods__["EndText"] = _BotInteractor._Quest_EndText_get
    if _newclass:
        EndText = _swig_property(_BotInteractor._Quest_EndText_get, _BotInteractor._Quest_EndText_set)
    __swig_setmethods__["f2"] = _BotInteractor._Quest_f2_set
    __swig_getmethods__["f2"] = _BotInteractor._Quest_f2_get
    if _newclass:
        f2 = _swig_property(_BotInteractor._Quest_f2_get, _BotInteractor._Quest_f2_set)
    __swig_setmethods__["Objective1"] = _BotInteractor._Quest_Objective1_set
    __swig_getmethods__["Objective1"] = _BotInteractor._Quest_Objective1_get
    if _newclass:
        Objective1 = _swig_property(_BotInteractor._Quest_Objective1_get, _BotInteractor._Quest_Objective1_set)
    __swig_setmethods__["f3"] = _BotInteractor._Quest_f3_set
    __swig_getmethods__["f3"] = _BotInteractor._Quest_f3_get
    if _newclass:
        f3 = _swig_property(_BotInteractor._Quest_f3_get, _BotInteractor._Quest_f3_set)

    def __init__(self):
        this = _BotInteractor.new__Quest()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete__Quest
    __del__ = lambda self: None
_Quest_swigregister = _BotInteractor._Quest_swigregister
_Quest_swigregister(_Quest)

class QuestManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuestManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuestManager, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _BotInteractor.new_QuestManager()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_QuestManager
    __del__ = lambda self: None
    __swig_getmethods__["GetActiveQuestNumber"] = lambda x: _BotInteractor.QuestManager_GetActiveQuestNumber
    if _newclass:
        GetActiveQuestNumber = staticmethod(_BotInteractor.QuestManager_GetActiveQuestNumber)
    __swig_getmethods__["GetQuestJournalIndex"] = lambda x: _BotInteractor.QuestManager_GetQuestJournalIndex
    if _newclass:
        GetQuestJournalIndex = staticmethod(_BotInteractor.QuestManager_GetQuestJournalIndex)
    __swig_getmethods__["EnumActiveQuests"] = lambda x: _BotInteractor.QuestManager_EnumActiveQuests
    if _newclass:
        EnumActiveQuests = staticmethod(_BotInteractor.QuestManager_EnumActiveQuests)
    __swig_getmethods__["GetQuestIds"] = lambda x: _BotInteractor.QuestManager_GetQuestIds
    if _newclass:
        GetQuestIds = staticmethod(_BotInteractor.QuestManager_GetQuestIds)
    __swig_getmethods__["GetQuest"] = lambda x: _BotInteractor.QuestManager_GetQuest
    if _newclass:
        GetQuest = staticmethod(_BotInteractor.QuestManager_GetQuest)
    __swig_getmethods__["GetQuestBlob"] = lambda x: _BotInteractor.QuestManager_GetQuestBlob
    if _newclass:
        GetQuestBlob = staticmethod(_BotInteractor.QuestManager_GetQuestBlob)
    __swig_getmethods__["SelectQuestInJournal"] = lambda x: _BotInteractor.QuestManager_SelectQuestInJournal
    if _newclass:
        SelectQuestInJournal = staticmethod(_BotInteractor.QuestManager_SelectQuestInJournal)
QuestManager_swigregister = _BotInteractor.QuestManager_swigregister
QuestManager_swigregister(QuestManager)

def QuestManager_GetActiveQuestNumber():
    return _BotInteractor.QuestManager_GetActiveQuestNumber()
QuestManager_GetActiveQuestNumber = _BotInteractor.QuestManager_GetActiveQuestNumber

def QuestManager_GetQuestJournalIndex(id):
    return _BotInteractor.QuestManager_GetQuestJournalIndex(id)
QuestManager_GetQuestJournalIndex = _BotInteractor.QuestManager_GetQuestJournalIndex

def QuestManager_EnumActiveQuests():
    return _BotInteractor.QuestManager_EnumActiveQuests()
QuestManager_EnumActiveQuests = _BotInteractor.QuestManager_EnumActiveQuests

def QuestManager_GetQuestIds():
    return _BotInteractor.QuestManager_GetQuestIds()
QuestManager_GetQuestIds = _BotInteractor.QuestManager_GetQuestIds

def QuestManager_GetQuest(id):
    return _BotInteractor.QuestManager_GetQuest(id)
QuestManager_GetQuest = _BotInteractor.QuestManager_GetQuest

def QuestManager_GetQuestBlob(id):
    return _BotInteractor.QuestManager_GetQuestBlob(id)
QuestManager_GetQuestBlob = _BotInteractor.QuestManager_GetQuestBlob

def QuestManager_SelectQuestInJournal(id):
    return _BotInteractor.QuestManager_SelectQuestInJournal(id)
QuestManager_SelectQuestInJournal = _BotInteractor.QuestManager_SelectQuestInJournal

class UnsignedVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _BotInteractor.UnsignedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BotInteractor.UnsignedVector___nonzero__(self)

    def __bool__(self):
        return _BotInteractor.UnsignedVector___bool__(self)

    def __len__(self):
        return _BotInteractor.UnsignedVector___len__(self)

    def __getslice__(self, i, j):
        return _BotInteractor.UnsignedVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BotInteractor.UnsignedVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BotInteractor.UnsignedVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BotInteractor.UnsignedVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BotInteractor.UnsignedVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BotInteractor.UnsignedVector___setitem__(self, *args)

    def pop(self):
        return _BotInteractor.UnsignedVector_pop(self)

    def append(self, x):
        return _BotInteractor.UnsignedVector_append(self, x)

    def empty(self):
        return _BotInteractor.UnsignedVector_empty(self)

    def size(self):
        return _BotInteractor.UnsignedVector_size(self)

    def swap(self, v):
        return _BotInteractor.UnsignedVector_swap(self, v)

    def begin(self):
        return _BotInteractor.UnsignedVector_begin(self)

    def end(self):
        return _BotInteractor.UnsignedVector_end(self)

    def rbegin(self):
        return _BotInteractor.UnsignedVector_rbegin(self)

    def rend(self):
        return _BotInteractor.UnsignedVector_rend(self)

    def clear(self):
        return _BotInteractor.UnsignedVector_clear(self)

    def get_allocator(self):
        return _BotInteractor.UnsignedVector_get_allocator(self)

    def pop_back(self):
        return _BotInteractor.UnsignedVector_pop_back(self)

    def erase(self, *args):
        return _BotInteractor.UnsignedVector_erase(self, *args)

    def __init__(self, *args):
        this = _BotInteractor.new_UnsignedVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _BotInteractor.UnsignedVector_push_back(self, x)

    def front(self):
        return _BotInteractor.UnsignedVector_front(self)

    def back(self):
        return _BotInteractor.UnsignedVector_back(self)

    def assign(self, n, x):
        return _BotInteractor.UnsignedVector_assign(self, n, x)

    def resize(self, *args):
        return _BotInteractor.UnsignedVector_resize(self, *args)

    def insert(self, *args):
        return _BotInteractor.UnsignedVector_insert(self, *args)

    def reserve(self, n):
        return _BotInteractor.UnsignedVector_reserve(self, n)

    def capacity(self):
        return _BotInteractor.UnsignedVector_capacity(self)
    __swig_destroy__ = _BotInteractor.delete_UnsignedVector
    __del__ = lambda self: None
UnsignedVector_swigregister = _BotInteractor.UnsignedVector_swigregister
UnsignedVector_swigregister(UnsignedVector)

class ObjectManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectManager, name)
    __repr__ = _swig_repr
    __swig_getmethods__["EnumAllVisibleObjects"] = lambda x: _BotInteractor.ObjectManager_EnumAllVisibleObjects
    if _newclass:
        EnumAllVisibleObjects = staticmethod(_BotInteractor.ObjectManager_EnumAllVisibleObjects)
    __swig_getmethods__["Initialize"] = lambda x: _BotInteractor.ObjectManager_Initialize
    if _newclass:
        Initialize = staticmethod(_BotInteractor.ObjectManager_Initialize)
    __swig_getmethods__["GetGameObjectsList"] = lambda x: _BotInteractor.ObjectManager_GetGameObjectsList
    if _newclass:
        GetGameObjectsList = staticmethod(_BotInteractor.ObjectManager_GetGameObjectsList)
    __swig_getmethods__["GetItemsList"] = lambda x: _BotInteractor.ObjectManager_GetItemsList
    if _newclass:
        GetItemsList = staticmethod(_BotInteractor.ObjectManager_GetItemsList)
    __swig_getmethods__["GetUnitsList"] = lambda x: _BotInteractor.ObjectManager_GetUnitsList
    if _newclass:
        GetUnitsList = staticmethod(_BotInteractor.ObjectManager_GetUnitsList)
    __swig_getmethods__["GetPlayersList"] = lambda x: _BotInteractor.ObjectManager_GetPlayersList
    if _newclass:
        GetPlayersList = staticmethod(_BotInteractor.ObjectManager_GetPlayersList)
    __swig_getmethods__["DumpAllObjectNames"] = lambda x: _BotInteractor.ObjectManager_DumpAllObjectNames
    if _newclass:
        DumpAllObjectNames = staticmethod(_BotInteractor.ObjectManager_DumpAllObjectNames)
    __swig_getmethods__["GetPlayer"] = lambda x: _BotInteractor.ObjectManager_GetPlayer
    if _newclass:
        GetPlayer = staticmethod(_BotInteractor.ObjectManager_GetPlayer)
    __swig_getmethods__["FindUnitByName"] = lambda x: _BotInteractor.ObjectManager_FindUnitByName
    if _newclass:
        FindUnitByName = staticmethod(_BotInteractor.ObjectManager_FindUnitByName)
    __swig_getmethods__["ClearAllLists"] = lambda x: _BotInteractor.ObjectManager_ClearAllLists
    if _newclass:
        ClearAllLists = staticmethod(_BotInteractor.ObjectManager_ClearAllLists)
    __swig_getmethods__["GetTargetObject"] = lambda x: _BotInteractor.ObjectManager_GetTargetObject
    if _newclass:
        GetTargetObject = staticmethod(_BotInteractor.ObjectManager_GetTargetObject)

    def __init__(self):
        this = _BotInteractor.new_ObjectManager()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_ObjectManager
    __del__ = lambda self: None
ObjectManager_swigregister = _BotInteractor.ObjectManager_swigregister
ObjectManager_swigregister(ObjectManager)

def ObjectManager_EnumAllVisibleObjects():
    return _BotInteractor.ObjectManager_EnumAllVisibleObjects()
ObjectManager_EnumAllVisibleObjects = _BotInteractor.ObjectManager_EnumAllVisibleObjects

def ObjectManager_Initialize():
    return _BotInteractor.ObjectManager_Initialize()
ObjectManager_Initialize = _BotInteractor.ObjectManager_Initialize

def ObjectManager_GetGameObjectsList():
    return _BotInteractor.ObjectManager_GetGameObjectsList()
ObjectManager_GetGameObjectsList = _BotInteractor.ObjectManager_GetGameObjectsList

def ObjectManager_GetItemsList():
    return _BotInteractor.ObjectManager_GetItemsList()
ObjectManager_GetItemsList = _BotInteractor.ObjectManager_GetItemsList

def ObjectManager_GetUnitsList():
    return _BotInteractor.ObjectManager_GetUnitsList()
ObjectManager_GetUnitsList = _BotInteractor.ObjectManager_GetUnitsList

def ObjectManager_GetPlayersList():
    return _BotInteractor.ObjectManager_GetPlayersList()
ObjectManager_GetPlayersList = _BotInteractor.ObjectManager_GetPlayersList

def ObjectManager_DumpAllObjectNames():
    return _BotInteractor.ObjectManager_DumpAllObjectNames()
ObjectManager_DumpAllObjectNames = _BotInteractor.ObjectManager_DumpAllObjectNames

def ObjectManager_GetPlayer():
    return _BotInteractor.ObjectManager_GetPlayer()
ObjectManager_GetPlayer = _BotInteractor.ObjectManager_GetPlayer

def ObjectManager_FindUnitByName(name):
    return _BotInteractor.ObjectManager_FindUnitByName(name)
ObjectManager_FindUnitByName = _BotInteractor.ObjectManager_FindUnitByName

def ObjectManager_ClearAllLists():
    return _BotInteractor.ObjectManager_ClearAllLists()
ObjectManager_ClearAllLists = _BotInteractor.ObjectManager_ClearAllLists

def ObjectManager_GetTargetObject():
    return _BotInteractor.ObjectManager_GetTargetObject()
ObjectManager_GetTargetObject = _BotInteractor.ObjectManager_GetTargetObject

class UnitVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _BotInteractor.UnitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _BotInteractor.UnitVector___nonzero__(self)

    def __bool__(self):
        return _BotInteractor.UnitVector___bool__(self)

    def __len__(self):
        return _BotInteractor.UnitVector___len__(self)

    def __getslice__(self, i, j):
        return _BotInteractor.UnitVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _BotInteractor.UnitVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _BotInteractor.UnitVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _BotInteractor.UnitVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _BotInteractor.UnitVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _BotInteractor.UnitVector___setitem__(self, *args)

    def pop(self):
        return _BotInteractor.UnitVector_pop(self)

    def append(self, x):
        return _BotInteractor.UnitVector_append(self, x)

    def empty(self):
        return _BotInteractor.UnitVector_empty(self)

    def size(self):
        return _BotInteractor.UnitVector_size(self)

    def swap(self, v):
        return _BotInteractor.UnitVector_swap(self, v)

    def begin(self):
        return _BotInteractor.UnitVector_begin(self)

    def end(self):
        return _BotInteractor.UnitVector_end(self)

    def rbegin(self):
        return _BotInteractor.UnitVector_rbegin(self)

    def rend(self):
        return _BotInteractor.UnitVector_rend(self)

    def clear(self):
        return _BotInteractor.UnitVector_clear(self)

    def get_allocator(self):
        return _BotInteractor.UnitVector_get_allocator(self)

    def pop_back(self):
        return _BotInteractor.UnitVector_pop_back(self)

    def erase(self, *args):
        return _BotInteractor.UnitVector_erase(self, *args)

    def __init__(self, *args):
        this = _BotInteractor.new_UnitVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _BotInteractor.UnitVector_push_back(self, x)

    def front(self):
        return _BotInteractor.UnitVector_front(self)

    def back(self):
        return _BotInteractor.UnitVector_back(self)

    def assign(self, n, x):
        return _BotInteractor.UnitVector_assign(self, n, x)

    def resize(self, *args):
        return _BotInteractor.UnitVector_resize(self, *args)

    def insert(self, *args):
        return _BotInteractor.UnitVector_insert(self, *args)

    def reserve(self, n):
        return _BotInteractor.UnitVector_reserve(self, n)

    def capacity(self):
        return _BotInteractor.UnitVector_capacity(self)
    __swig_destroy__ = _BotInteractor.delete_UnitVector
    __del__ = lambda self: None
UnitVector_swigregister = _BotInteractor.UnitVector_swigregister
UnitVector_swigregister(UnitVector)

class BotInteractor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BotInteractor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BotInteractor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GoThroughPath"] = lambda x: _BotInteractor.BotInteractor_GoThroughPath
    if _newclass:
        GoThroughPath = staticmethod(_BotInteractor.BotInteractor_GoThroughPath)
    __swig_getmethods__["StartGame"] = lambda x: _BotInteractor.BotInteractor_StartGame
    if _newclass:
        StartGame = staticmethod(_BotInteractor.BotInteractor_StartGame)
    __swig_getmethods__["GoToPoint"] = lambda x: _BotInteractor.BotInteractor_GoToPoint
    if _newclass:
        GoToPoint = staticmethod(_BotInteractor.BotInteractor_GoToPoint)
    __swig_getmethods__["GetArea"] = lambda x: _BotInteractor.BotInteractor_GetArea
    if _newclass:
        GetArea = staticmethod(_BotInteractor.BotInteractor_GetArea)
    __swig_getmethods__["FindPlayerPath"] = lambda x: _BotInteractor.BotInteractor_FindPlayerPath
    if _newclass:
        FindPlayerPath = staticmethod(_BotInteractor.BotInteractor_FindPlayerPath)
    __swig_getmethods__["PulseCheck"] = lambda x: _BotInteractor.BotInteractor_PulseCheck
    if _newclass:
        PulseCheck = staticmethod(_BotInteractor.BotInteractor_PulseCheck)
    __swig_getmethods__["Init"] = lambda x: _BotInteractor.BotInteractor_Init
    if _newclass:
        Init = staticmethod(_BotInteractor.BotInteractor_Init)
    __swig_getmethods__["CleanUp"] = lambda x: _BotInteractor.BotInteractor_CleanUp
    if _newclass:
        CleanUp = staticmethod(_BotInteractor.BotInteractor_CleanUp)

    def __init__(self):
        this = _BotInteractor.new_BotInteractor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _BotInteractor.delete_BotInteractor
    __del__ = lambda self: None
BotInteractor_swigregister = _BotInteractor.BotInteractor_swigregister
BotInteractor_swigregister(BotInteractor)

def BotInteractor_GoThroughPath():
    return _BotInteractor.BotInteractor_GoThroughPath()
BotInteractor_GoThroughPath = _BotInteractor.BotInteractor_GoThroughPath

def BotInteractor_StartGame(login, password, char_name):
    return _BotInteractor.BotInteractor_StartGame(login, password, char_name)
BotInteractor_StartGame = _BotInteractor.BotInteractor_StartGame

def BotInteractor_GoToPoint(*args):
    return _BotInteractor.BotInteractor_GoToPoint(*args)
BotInteractor_GoToPoint = _BotInteractor.BotInteractor_GoToPoint

def BotInteractor_GetArea():
    return _BotInteractor.BotInteractor_GetArea()
BotInteractor_GetArea = _BotInteractor.BotInteractor_GetArea

def BotInteractor_FindPlayerPath(end):
    return _BotInteractor.BotInteractor_FindPlayerPath(end)
BotInteractor_FindPlayerPath = _BotInteractor.BotInteractor_FindPlayerPath

def BotInteractor_PulseCheck():
    return _BotInteractor.BotInteractor_PulseCheck()
BotInteractor_PulseCheck = _BotInteractor.BotInteractor_PulseCheck

def BotInteractor_Init():
    return _BotInteractor.BotInteractor_Init()
BotInteractor_Init = _BotInteractor.BotInteractor_Init

def BotInteractor_CleanUp():
    return _BotInteractor.BotInteractor_CleanUp()
BotInteractor_CleanUp = _BotInteractor.BotInteractor_CleanUp

# This file is compatible with both classic and new-style classes.


