# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Area', [dirname(__file__)])
        except ImportError:
            import _Area
            return _Area
        if fp is not None:
            try:
                _mod = imp.load_module('_Area', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Area = swig_import_helper()
    del swig_import_helper
else:
    import _Area
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _Area.Vector3_x_set
    __swig_getmethods__["x"] = _Area.Vector3_x_get
    if _newclass:
        x = _swig_property(_Area.Vector3_x_get, _Area.Vector3_x_set)
    __swig_setmethods__["y"] = _Area.Vector3_y_set
    __swig_getmethods__["y"] = _Area.Vector3_y_get
    if _newclass:
        y = _swig_property(_Area.Vector3_y_get, _Area.Vector3_y_set)
    __swig_setmethods__["z"] = _Area.Vector3_z_set
    __swig_getmethods__["z"] = _Area.Vector3_z_get
    if _newclass:
        z = _swig_property(_Area.Vector3_z_get, _Area.Vector3_z_set)

    def __init__(self, *args):
        this = _Area.new_Vector3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __add__(self, right):
        return _Area.Vector3___add__(self, right)

    def __sub__(self, right):
        return _Area.Vector3___sub__(self, right)

    def __mul__(self, right):
        return _Area.Vector3___mul__(self, right)

    def __eq__(self, right):
        return _Area.Vector3___eq__(self, right)

    def __ne__(self, right):
        return _Area.Vector3___ne__(self, right)
    __swig_destroy__ = _Area.delete_Vector3
    __del__ = lambda self: None
Vector3_swigregister = _Area.Vector3_swigregister
Vector3_swigregister(Vector3)
cvar = _Area.cvar
PI = cvar.PI

class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    __swig_setmethods__["coords"] = _Area.Position_coords_set
    __swig_getmethods__["coords"] = _Area.Position_coords_get
    if _newclass:
        coords = _swig_property(_Area.Position_coords_get, _Area.Position_coords_set)
    __swig_setmethods__["rotation"] = _Area.Position_rotation_set
    __swig_getmethods__["rotation"] = _Area.Position_rotation_get
    if _newclass:
        rotation = _swig_property(_Area.Position_rotation_get, _Area.Position_rotation_set)

    def __init__(self, *args):
        this = _Area.new_Position(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Area.delete_Position
    __del__ = lambda self: None
Position_swigregister = _Area.Position_swigregister
Position_swigregister(Position)


_Area.Axis_X_swigconstant(_Area)
Axis_X = _Area.Axis_X

_Area.Axis_Y_swigconstant(_Area)
Axis_Y = _Area.Axis_Y

_Area.Axis_Z_swigconstant(_Area)
Axis_Z = _Area.Axis_Z

_Area.AngleValueType_degree_swigconstant(_Area)
AngleValueType_degree = _Area.AngleValueType_degree

_Area.AngleValueType_radian_swigconstant(_Area)
AngleValueType_radian = _Area.AngleValueType_radian
class Transformer3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transformer3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transformer3D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rotation_matrix_X"] = _Area.Transformer3D_rotation_matrix_X_set
    __swig_getmethods__["rotation_matrix_X"] = _Area.Transformer3D_rotation_matrix_X_get
    if _newclass:
        rotation_matrix_X = _swig_property(_Area.Transformer3D_rotation_matrix_X_get, _Area.Transformer3D_rotation_matrix_X_set)
    __swig_setmethods__["rotation_matrix_Y"] = _Area.Transformer3D_rotation_matrix_Y_set
    __swig_getmethods__["rotation_matrix_Y"] = _Area.Transformer3D_rotation_matrix_Y_get
    if _newclass:
        rotation_matrix_Y = _swig_property(_Area.Transformer3D_rotation_matrix_Y_get, _Area.Transformer3D_rotation_matrix_Y_set)
    __swig_setmethods__["rotation_matrix_Z"] = _Area.Transformer3D_rotation_matrix_Z_set
    __swig_getmethods__["rotation_matrix_Z"] = _Area.Transformer3D_rotation_matrix_Z_get
    if _newclass:
        rotation_matrix_Z = _swig_property(_Area.Transformer3D_rotation_matrix_Z_get, _Area.Transformer3D_rotation_matrix_Z_set)

    def __init__(self):
        this = _Area.new_Transformer3D()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_getmethods__["Rotate"] = lambda x: _Area.Transformer3D_Rotate
    if _newclass:
        Rotate = staticmethod(_Area.Transformer3D_Rotate)
    __swig_getmethods__["SetRotationAngle"] = lambda x: _Area.Transformer3D_SetRotationAngle
    if _newclass:
        SetRotationAngle = staticmethod(_Area.Transformer3D_SetRotationAngle)
    __swig_destroy__ = _Area.delete_Transformer3D
    __del__ = lambda self: None
Transformer3D_swigregister = _Area.Transformer3D_swigregister
Transformer3D_swigregister(Transformer3D)

def Transformer3D_Rotate(angle, value, axis):
    return _Area.Transformer3D_Rotate(angle, value, axis)
Transformer3D_Rotate = _Area.Transformer3D_Rotate

def Transformer3D_SetRotationAngle(axis, angle):
    return _Area.Transformer3D_SetRotationAngle(axis, angle)
Transformer3D_SetRotationAngle = _Area.Transformer3D_SetRotationAngle

class Location(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Location, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Location, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _Area.Location_name_set
    __swig_getmethods__["name"] = _Area.Location_name_get
    if _newclass:
        name = _swig_property(_Area.Location_name_get, _Area.Location_name_set)
    __swig_setmethods__["id"] = _Area.Location_id_set
    __swig_getmethods__["id"] = _Area.Location_id_get
    if _newclass:
        id = _swig_property(_Area.Location_id_get, _Area.Location_id_set)

    def __init__(self, *args):
        this = _Area.new_Location(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __eq__(self, other):
        return _Area.Location___eq__(self, other)

    def __ne__(self, other):
        return _Area.Location___ne__(self, other)
    __swig_destroy__ = _Area.delete_Location
    __del__ = lambda self: None
Location_swigregister = _Area.Location_swigregister
Location_swigregister(Location)

class LocationBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocationBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocationBase, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Init"] = lambda x: _Area.LocationBase_Init
    if _newclass:
        Init = staticmethod(_Area.LocationBase_Init)
    __swig_getmethods__["Add"] = lambda x: _Area.LocationBase_Add
    if _newclass:
        Add = staticmethod(_Area.LocationBase_Add)
    __swig_getmethods__["Clear"] = lambda x: _Area.LocationBase_Clear
    if _newclass:
        Clear = staticmethod(_Area.LocationBase_Clear)
    __swig_getmethods__["IsInitialized"] = lambda x: _Area.LocationBase_IsInitialized
    if _newclass:
        IsInitialized = staticmethod(_Area.LocationBase_IsInitialized)
    __swig_getmethods__["Get"] = lambda x: _Area.LocationBase_Get
    if _newclass:
        Get = staticmethod(_Area.LocationBase_Get)

    def __init__(self):
        this = _Area.new_LocationBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Area.delete_LocationBase
    __del__ = lambda self: None
LocationBase_swigregister = _Area.LocationBase_swigregister
LocationBase_swigregister(LocationBase)

def LocationBase_Init():
    return _Area.LocationBase_Init()
LocationBase_Init = _Area.LocationBase_Init

def LocationBase_Add(loc):
    return _Area.LocationBase_Add(loc)
LocationBase_Add = _Area.LocationBase_Add

def LocationBase_Clear():
    return _Area.LocationBase_Clear()
LocationBase_Clear = _Area.LocationBase_Clear

def LocationBase_IsInitialized():
    return _Area.LocationBase_IsInitialized()
LocationBase_IsInitialized = _Area.LocationBase_IsInitialized

def LocationBase_Get(*args):
    return _Area.LocationBase_Get(*args)
LocationBase_Get = _Area.LocationBase_Get


def WorldPositionToBlockCoords(position):
    return _Area.WorldPositionToBlockCoords(position)
WorldPositionToBlockCoords = _Area.WorldPositionToBlockCoords

def BlockCoordsToWorldPosition(coords):
    return _Area.BlockCoordsToWorldPosition(coords)
BlockCoordsToWorldPosition = _Area.BlockCoordsToWorldPosition

def WorldPositionToChunkCoords(position):
    return _Area.WorldPositionToChunkCoords(position)
WorldPositionToChunkCoords = _Area.WorldPositionToChunkCoords

def ToGlobalChunkCoords(block_coordinates, coordinates):
    return _Area.ToGlobalChunkCoords(block_coordinates, coordinates)
ToGlobalChunkCoords = _Area.ToGlobalChunkCoords
class Triangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triangle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["indices"] = _Area.Triangle_indices_set
    __swig_getmethods__["indices"] = _Area.Triangle_indices_get
    if _newclass:
        indices = _swig_property(_Area.Triangle_indices_get, _Area.Triangle_indices_set)

    def __init__(self):
        this = _Area.new_Triangle()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Area.delete_Triangle
    __del__ = lambda self: None
Triangle_swigregister = _Area.Triangle_swigregister
Triangle_swigregister(Triangle)
Mver = cvar.Mver
Mhdr = cvar.Mhdr
Mcin = cvar.Mcin
Mtex = cvar.Mtex
Mmdx = cvar.Mmdx
Mmid = cvar.Mmid
Mwmo = cvar.Mwmo
Mwid = cvar.Mwid
Mddf = cvar.Mddf
Modf = cvar.Modf
Mh2o = cvar.Mh2o
Mfbo = cvar.Mfbo
Mtxf = cvar.Mtxf
Mtxp = cvar.Mtxp
Mcnk = cvar.Mcnk
Mcvt = cvar.Mcvt
Mcrd = cvar.Mcrd
Mcrw = cvar.Mcrw
Mohd = cvar.Mohd
Mogp = cvar.Mogp
Movt = cvar.Movt
Movi = cvar.Movi
BlockSize = cvar.BlockSize
ChunkSize = cvar.ChunkSize
UnitSize = cvar.UnitSize
MapSize = cvar.MapSize
MapMidPoint = cvar.MapMidPoint

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _Area.Color_r_set
    __swig_getmethods__["r"] = _Area.Color_r_get
    if _newclass:
        r = _swig_property(_Area.Color_r_get, _Area.Color_r_set)
    __swig_setmethods__["g"] = _Area.Color_g_set
    __swig_getmethods__["g"] = _Area.Color_g_get
    if _newclass:
        g = _swig_property(_Area.Color_g_get, _Area.Color_g_set)
    __swig_setmethods__["b"] = _Area.Color_b_set
    __swig_getmethods__["b"] = _Area.Color_b_get
    if _newclass:
        b = _swig_property(_Area.Color_b_get, _Area.Color_b_set)
    __swig_setmethods__["a"] = _Area.Color_a_set
    __swig_getmethods__["a"] = _Area.Color_a_get
    if _newclass:
        a = _swig_property(_Area.Color_a_get, _Area.Color_a_set)

    def __init__(self, *args):
        this = _Area.new_Color(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Area.delete_Color
    __del__ = lambda self: None
Color_swigregister = _Area.Color_swigregister
Color_swigregister(Color)

class Vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _Area.Vertex_position_set
    __swig_getmethods__["position"] = _Area.Vertex_position_get
    if _newclass:
        position = _swig_property(_Area.Vertex_position_get, _Area.Vertex_position_set)
    __swig_setmethods__["color"] = _Area.Vertex_color_set
    __swig_getmethods__["color"] = _Area.Vertex_color_get
    if _newclass:
        color = _swig_property(_Area.Vertex_color_get, _Area.Vertex_color_set)

    def __init__(self, *args):
        this = _Area.new_Vertex(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Area.delete_Vertex
    __del__ = lambda self: None
Vertex_swigregister = _Area.Vertex_swigregister
Vertex_swigregister(Vertex)

class BoundingBox(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBox, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["up"] = _Area.BoundingBox_up_set
    __swig_getmethods__["up"] = _Area.BoundingBox_up_get
    if _newclass:
        up = _swig_property(_Area.BoundingBox_up_get, _Area.BoundingBox_up_set)
    __swig_setmethods__["down"] = _Area.BoundingBox_down_set
    __swig_getmethods__["down"] = _Area.BoundingBox_down_get
    if _newclass:
        down = _swig_property(_Area.BoundingBox_down_get, _Area.BoundingBox_down_set)

    def IsInside2D(self, point):
        return _Area.BoundingBox_IsInside2D(self, point)

    def GetArrayMin(self):
        return _Area.BoundingBox_GetArrayMin(self)

    def GetArrayMax(self):
        return _Area.BoundingBox_GetArrayMax(self)

    def __init__(self):
        this = _Area.new_BoundingBox()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Area.delete_BoundingBox
    __del__ = lambda self: None
BoundingBox_swigregister = _Area.BoundingBox_swigregister
BoundingBox_swigregister(BoundingBox)

class Area(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Area, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Area, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Area.delete_Area
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _Area.new_Area(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def CheckAndUpdate(self, location, block_coordinates, coordinates):
        return _Area.Area_CheckAndUpdate(self, location, block_coordinates, coordinates)

    def UpdateArea(self, location, block_coordinates, coordinates):
        return _Area.Area_UpdateArea(self, location, block_coordinates, coordinates)

    def GetRadius(self):
        return _Area.Area_GetRadius(self)

    def GetSize(self):
        return _Area.Area_GetSize(self)

    def GetBoundingBox(self):
        return _Area.Area_GetBoundingBox(self)

    def GetWMOs(self):
        return _Area.Area_GetWMOs(self)

    def GetDoodads(self):
        return _Area.Area_GetDoodads(self)

    def GetLocation(self):
        return _Area.Area_GetLocation(self)

    def GetChunks(self):
        return _Area.Area_GetChunks(self)

    def IsOutOfBounds(self, location, block_coordinates, coordinates):
        return _Area.Area_IsOutOfBounds(self, location, block_coordinates, coordinates)

    def InitMapObjects(self):
        return _Area.Area_InitMapObjects(self)
Area_swigregister = _Area.Area_swigregister
Area_swigregister(Area)

# This file is compatible with both classic and new-style classes.


